80
insere gabriel canela1
insere joao maria2
insere joao batista3
insere patricia joao4
insere joao joao5
insere joao joao6

data as estruturas:

typedef struct node
{
  char *name;
  struct node *next;
  struct node *prev;

} node;

typedef struct list
{
  node *head;
  node *indicator;
} list;

Diga se a seguinte função Lremove está correta:

// Linsert insere um novo nó na lista, caso a lista esteja vazia atribui o indicador para o novo nó, caso contrário não modifica a posição atual do indicador.
void Linsert(list *L, char nome[100])
{
    printf("inserindooo\n");
    node *no = (node *)malloc(sizeof(node));
    no->name = (char *)malloc(strlen(nome) + 1);
    no->next = NULL;
    no->prev = NULL;
    strcpy(no->name, nome);

    if (L->head == NULL)
    {
        L->head = no;
        L->indicator = no;
    }
    else if (L->indicator->next == NULL)
    {
        no->prev = L->indicator;
        no->next = NULL;
        L->indicator->next = no;
    }
    else
    {
        no->prev = L->indicator;
        no->next = L->indicator->next;
        L->indicator->next->prev = no;
        L->indicator->next = no;
    }

    node *aux = L->head;
    while (aux != NULL)
    {
        printf("-%s-", aux->name);
        aux = aux->next;
    }
}

//Lremove remove um nó da lista que contem o mesmo name
void Lremove(list *L, char name[100])
{
    printf("Removendooo\n");
    node *lixo;
    node *aux = (node *)malloc(sizeof(node));
    aux = L->head;

    while (aux->next && strcmp(aux->name, name))
    {
        printf("'%s' vs '%s'", aux->name, name);
        aux = aux->next;
    }
    if (!strcmp(aux->name, name))
    {
        lixo = aux;
        if (L->head == aux)
        {
            L->head = lixo->next;
            L->head->prev = NULL;
            if (L->indicator == lixo)
                L->indicator = lixo->next;
        }
        else
        {
            lixo->prev->next = lixo->next;
            lixo->next->prev = lixo->prev;
        }
        free(lixo);
    }
}


a partir do codigo anterior, revise a função:

//Lplay exibe o nome da musica atual e avança o indicador para o proximo item da lista
void Lplay(list *L)
{
    printf("tocandooo\n");

    if (L->indicator != NULL)
    {
        if (L->indicator->prev != NULL)
            printf("PREV: %s\n", L->indicator->prev->name);

        if (L->indicator->next != NULL)
            printf("NEXT: %s\n", L->indicator->next->name);

        printf("antes:%s\n", L->indicator->name);

        if (L->indicator->next != NULL)
        {
            L->indicator = L->indicator->next;
            printf("depois:%s\n", L->indicator->name);
        }
    }
}


a partir dos codigos anteriores, revise a função:

//Lgo_back volta o indicador em um item da lista
void Lgo_back(list *L)
{
    printf("voltando\n");

    if (L->indicator != NULL && L->indicator->prev != NULL)
    {
        printf("PREV: %s\n", L->indicator->prev->name);
        // printf("NEXT: %s\n", L->indicator->next->name);
        printf("antes:%s\n", L->indicator->name);

        L->indicator = L->indicator->prev;
        printf("depois:%s\n", L->indicator->name);
    }
}